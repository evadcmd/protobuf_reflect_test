// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package transition

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// TransitionClient is the client API for Transition service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TransitionClient interface {
	Simple(ctx context.Context, in *Param, opts ...grpc.CallOption) (*Res, error)
	StreamResp(ctx context.Context, in *Param, opts ...grpc.CallOption) (Transition_StreamRespClient, error)
	StreamReq(ctx context.Context, opts ...grpc.CallOption) (Transition_StreamReqClient, error)
	BiStream(ctx context.Context, opts ...grpc.CallOption) (Transition_BiStreamClient, error)
}

type transitionClient struct {
	cc grpc.ClientConnInterface
}

func NewTransitionClient(cc grpc.ClientConnInterface) TransitionClient {
	return &transitionClient{cc}
}

func (c *transitionClient) Simple(ctx context.Context, in *Param, opts ...grpc.CallOption) (*Res, error) {
	out := new(Res)
	err := c.cc.Invoke(ctx, "/transition.Transition/Simple", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transitionClient) StreamResp(ctx context.Context, in *Param, opts ...grpc.CallOption) (Transition_StreamRespClient, error) {
	stream, err := c.cc.NewStream(ctx, &Transition_ServiceDesc.Streams[0], "/transition.Transition/StreamResp", opts...)
	if err != nil {
		return nil, err
	}
	x := &transitionStreamRespClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Transition_StreamRespClient interface {
	Recv() (*Res, error)
	grpc.ClientStream
}

type transitionStreamRespClient struct {
	grpc.ClientStream
}

func (x *transitionStreamRespClient) Recv() (*Res, error) {
	m := new(Res)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *transitionClient) StreamReq(ctx context.Context, opts ...grpc.CallOption) (Transition_StreamReqClient, error) {
	stream, err := c.cc.NewStream(ctx, &Transition_ServiceDesc.Streams[1], "/transition.Transition/StreamReq", opts...)
	if err != nil {
		return nil, err
	}
	x := &transitionStreamReqClient{stream}
	return x, nil
}

type Transition_StreamReqClient interface {
	Send(*Param) error
	CloseAndRecv() (*Res, error)
	grpc.ClientStream
}

type transitionStreamReqClient struct {
	grpc.ClientStream
}

func (x *transitionStreamReqClient) Send(m *Param) error {
	return x.ClientStream.SendMsg(m)
}

func (x *transitionStreamReqClient) CloseAndRecv() (*Res, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(Res)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *transitionClient) BiStream(ctx context.Context, opts ...grpc.CallOption) (Transition_BiStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &Transition_ServiceDesc.Streams[2], "/transition.Transition/BiStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &transitionBiStreamClient{stream}
	return x, nil
}

type Transition_BiStreamClient interface {
	Send(*Param) error
	Recv() (*Res, error)
	grpc.ClientStream
}

type transitionBiStreamClient struct {
	grpc.ClientStream
}

func (x *transitionBiStreamClient) Send(m *Param) error {
	return x.ClientStream.SendMsg(m)
}

func (x *transitionBiStreamClient) Recv() (*Res, error) {
	m := new(Res)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// TransitionServer is the server API for Transition service.
// All implementations must embed UnimplementedTransitionServer
// for forward compatibility
type TransitionServer interface {
	Simple(context.Context, *Param) (*Res, error)
	StreamResp(*Param, Transition_StreamRespServer) error
	StreamReq(Transition_StreamReqServer) error
	BiStream(Transition_BiStreamServer) error
	mustEmbedUnimplementedTransitionServer()
}

// UnimplementedTransitionServer must be embedded to have forward compatible implementations.
type UnimplementedTransitionServer struct {
}

func (UnimplementedTransitionServer) Simple(context.Context, *Param) (*Res, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Simple not implemented")
}
func (UnimplementedTransitionServer) StreamResp(*Param, Transition_StreamRespServer) error {
	return status.Errorf(codes.Unimplemented, "method StreamResp not implemented")
}
func (UnimplementedTransitionServer) StreamReq(Transition_StreamReqServer) error {
	return status.Errorf(codes.Unimplemented, "method StreamReq not implemented")
}
func (UnimplementedTransitionServer) BiStream(Transition_BiStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method BiStream not implemented")
}
func (UnimplementedTransitionServer) mustEmbedUnimplementedTransitionServer() {}

// UnsafeTransitionServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TransitionServer will
// result in compilation errors.
type UnsafeTransitionServer interface {
	mustEmbedUnimplementedTransitionServer()
}

func RegisterTransitionServer(s grpc.ServiceRegistrar, srv TransitionServer) {
	s.RegisterService(&Transition_ServiceDesc, srv)
}

func _Transition_Simple_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Param)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransitionServer).Simple(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/transition.Transition/Simple",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransitionServer).Simple(ctx, req.(*Param))
	}
	return interceptor(ctx, in, info, handler)
}

func _Transition_StreamResp_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Param)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TransitionServer).StreamResp(m, &transitionStreamRespServer{stream})
}

type Transition_StreamRespServer interface {
	Send(*Res) error
	grpc.ServerStream
}

type transitionStreamRespServer struct {
	grpc.ServerStream
}

func (x *transitionStreamRespServer) Send(m *Res) error {
	return x.ServerStream.SendMsg(m)
}

func _Transition_StreamReq_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(TransitionServer).StreamReq(&transitionStreamReqServer{stream})
}

type Transition_StreamReqServer interface {
	SendAndClose(*Res) error
	Recv() (*Param, error)
	grpc.ServerStream
}

type transitionStreamReqServer struct {
	grpc.ServerStream
}

func (x *transitionStreamReqServer) SendAndClose(m *Res) error {
	return x.ServerStream.SendMsg(m)
}

func (x *transitionStreamReqServer) Recv() (*Param, error) {
	m := new(Param)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Transition_BiStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(TransitionServer).BiStream(&transitionBiStreamServer{stream})
}

type Transition_BiStreamServer interface {
	Send(*Res) error
	Recv() (*Param, error)
	grpc.ServerStream
}

type transitionBiStreamServer struct {
	grpc.ServerStream
}

func (x *transitionBiStreamServer) Send(m *Res) error {
	return x.ServerStream.SendMsg(m)
}

func (x *transitionBiStreamServer) Recv() (*Param, error) {
	m := new(Param)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Transition_ServiceDesc is the grpc.ServiceDesc for Transition service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Transition_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "transition.Transition",
	HandlerType: (*TransitionServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Simple",
			Handler:    _Transition_Simple_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamResp",
			Handler:       _Transition_StreamResp_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "StreamReq",
			Handler:       _Transition_StreamReq_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "BiStream",
			Handler:       _Transition_BiStream_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "transition.proto",
}
